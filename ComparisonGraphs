>> fs = 1000; % Sampling frequency
t = 0:1/fs:10; % Time vector
f1 = 300; % Start frequency of chirp
f2 = 400; % End frequency of chirp
x = chirp(t, f1, 10, f2) + randn(1, length(t)); % Simulated chirp signal with white Gaussian noise

% Bands for separation
bands = [290 310; 310 330; 330 350; 350 370; 370 390; 390 410]; % Adjust as needed

% Initialize an array to store spectral kurtosis values for each band
spectral_kurtosis = zeros(size(bands, 1), 1);

% Plot
figure;
subplot(size(bands, 1) + 2, 1, 1);
plot(t, x);
title('Original Signal');
xlabel('Time (s)');
ylabel('Amplitude');

% Loop through each frequency band and calculate spectral kurtosis
for i = 1:size(bands, 1)
    % Design bandpass filter
    d = designfilt('bandpassiir', ...
                   'FilterOrder', 4, ...
                   'HalfPowerFrequency1', bands(i, 1), ...
                   'HalfPowerFrequency2', bands(i, 2), ...
                   'SampleRate', fs);
    
    % Apply bandpass filter to the signal
    y = filtfilt(d, x);
    
    % Calculate kurtosis of the filtered signal
    spectral_kurtosis(i) = kurtosis(y);
    
    % Plot filtered signal
    subplot(size(bands, 1) + 2, 1, i + 1);
    plot(t, y);
    title(['Filtered Signal: ' num2str(bands(i, 1)) '-' num2str(bands(i, 2)) ' Hz']);
    xlabel('Time (s)');
    ylabel('Amplitude');
end

% Plot spectral kurtosis values
subplot(size(bands, 1) + 2, 1, size(bands, 1) + 2);
bar(bands(:, 1) + diff(bands, 1, 2)/2, spectral_kurtosis);
title('Spectral Kurtosis');
xlabel('Frequency (Hz)');
ylabel('Kurtosis');

% Calculate spectral kurtosis using FFT method
nfft = length(x);
X = fft(x, nfft);
Pxx = abs(X).^2/nfft; % Power spectral density
f = (0:nfft-1)*(fs/nfft); % Frequency vector

% Spectral kurtosis calculation
mean_Pxx = mean(Pxx);
std_Pxx = std(Pxx);
sk = (Pxx - mean_Pxx).^4 / (std_Pxx^4);

% Plot spectral kurtosis using FFT
subplot(size(bands, 1) + 3, 1, size(bands, 1) + 3);
plot(f, sk);
title('Spectral Kurtosis using FFT');
xlabel('Frequency (Hz)');
ylabel('Kurtosis');
xlim([0 fs/2]); % Display up to Nyquist frequency
xlim([0 fs/2]); % Display up to Nyquist frequency
